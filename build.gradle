// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

configurations {
	//Jars to package using ContainedDeps
	containedDep {
		transitive = false
	}
	compile.extendsFrom containedDep
}

allprojects {
	apply plugin: 'net.minecraftforge.gradle.forge'

	minecraft {
		version = project.mcVersion + "-" + project.forgeVersion
		runDir = "run"
		mappings = project.mappingsVer
		makeObfSourceJar = false
	}
	
	repositories {  
		//JEI
		maven 
		{
			url "http://dvs1.progwml6.com/files/maven"
		}
		//GuideAPI
		maven 
		{ 
			url 'http://tehnut.info/maven/' 
		}
		mavenLocal()
	}

	dependencies {
		// compile against the JEI API
		deobfCompile "mezz.jei:jei_${project.mcVersion}:${project.jeiVersion}:api"
		// at runtime, use the full JEI jar
		runtime "mezz.jei:jei_${project.mcVersion}:${project.jeiVersion}"
		deobfCompile "info.amerifrance.guideapi:Guide-API:${project.guideAPIVersion}"
	}
}

version = "${rootProject.mcVersion}-${rootProject.modVersion}"
group= "leviathan143.polar" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Polar"

dependencies {
	containedDep "daomephsta.umbra:umbra-minecraft:${project.umbraMCVersion}"
	containedDep "daomephsta.umbra:umbra-java:${project.umbraJavaVersion}"
	compile project('polar-api')
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task generateDependencyMetaFiles {doLast{
	//Delete any previous meta files
	file("${buildDir}/dependencyMeta").deleteDir()
	//Generate new meta files
	configurations.containedDep.resolvedConfiguration.resolvedArtifacts.each {
		def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
		metaFile.parentFile.mkdirs()
		//The newline is very important
		metaFile.text = "Maven-Artifact: ${it.moduleVersion.id}\n"
	}
}}

jar {
	from project('polar-api').sourceSets.main.output
	//Package contained dependencies
	into('/META-INF/libraries') {
		from configurations.containedDep, file("${buildDir}/dependencyMeta")
	}
	//Add contained dependencies to the manifest
	manifest {
		attributes 'ContainedDeps': configurations.containedDep.collect {it.name}.join(' ')
	}
	
	dependsOn generateDependencyMetaFiles
}
